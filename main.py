from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.filters.state import StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from environs import Env
from aiogram.fsm.state import State, StatesGroup
from aiogram_dialog.widgets.kbd import Button, Row, Column, Url, Select, Group, Back, Next, Cancel, Start, SwitchTo
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Calendar
from datetime import date
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, User
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs

env = Env()
env.read_env()

BOT_TOKEN = env('BOT_TOKEN')
CHAT_ID = env('CHAT_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MemoryStorage)
storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

router = Router()

expenses = {}


class StartSG(StatesGroup):
    start = State()
    category = State()
    no_click = State()

    refueling = State()
    highway = State()
    parking = State()
    washing = State()
    fine = State()
    tax = State()
    osago = State()
    kasko = State()
    other = State()
    other_selected = State()

    mileage = State()
    expense = State()
    choice_date = State()
    calendar = State()
    send_message = State()
    result = State()

    choice_change = State()


# –í—ã–±–æ—Ä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_selection(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id: str):
    categories = await category_getter()
    selected_category = next((category for category in categories['categories'] if str(category[1]) == str(item_id)),
                             None)
    if selected_category:
        dialog_manager.dialog_data['category'] = selected_category[0]
        expenses.update(dialog_manager.dialog_data)
        print(expenses)
        if selected_category[1] == 9:
            await dialog_manager.switch_to(state=StartSG.other_selected)
        else:
            await dialog_manager.switch_to(state=StartSG.mileage)


# –í–≤–æ–¥ –ø–æ–∫—É–ø–∫–∏ –≤ –ü—Ä–æ—á–µ–µ
def add_text_other(text):
    if isinstance(text, str):
        return text
    raise ValueError


async def correct_text_other(callback: CallbackQuery, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['category'] = '–ü—Ä–æ—á–µ–µ üõí: ' + text
    expenses.update(dialog_manager.dialog_data)
    print(expenses)
    await dialog_manager.switch_to(state=StartSG.mileage)


async def error_text_other(callback: CallbackQuery, widget: ManagedTextInput, dialog_manager: DialogManager,
                           error: ValueError):
    await dialog_manager.switch_to(state=StartSG.other_selected)


# –í–≤–æ–¥ –ü—Ä–æ–±–µ–≥–∞ –∏ –†–∞—Å—Ö–æ–¥–∞
def add_text_mileage(text):
    if all(ch.isdigit() for ch in text) and 5 <= len(text) <= 6:
        return text
    raise ValueError


async def correct_text_mileage(callback: CallbackQuery, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data['mileage'] = str(int(text) // 1000) + ' ' + str(text[-3:]) + ' –∫–º'
    expenses.update(dialog_manager.dialog_data)
    print(expenses)
    await dialog_manager.switch_to(state=StartSG.expense)


async def error_text_mileage(callback: CallbackQuery, widget: ManagedTextInput, dialog_manager: DialogManager,
                             error: ValueError):
    await dialog_manager.switch_to(state=StartSG.mileage)


async def skip_mileage(callback: CallbackQuery, widget, dialog_manager: DialogManager):
    dialog_manager.dialog_data['mileage'] = '–ù–µ —É–∫–∞–∑–∞–Ω'
    expenses.update(dialog_manager.dialog_data)
    print(expenses)
    await dialog_manager.switch_to(state=StartSG.choice_date)


def add_text_expense(text):
    if all(ch.isdigit() for ch in text) and 1 <= len(text) <= 6:
        return text
    raise ValueError


async def correct_text_expense(callback: CallbackQuery, widget: TextInput, dialog_manager: DialogManager, text: str):
    if int(text) >= 1000:
        dialog_manager.dialog_data['expense'] = str(int(text) // 1000) + ' ' + text[-3:] + ' —Ä—É–±.'
    else:
        dialog_manager.dialog_data['expense'] = text + ' —Ä—É–±.'
    expenses.update(dialog_manager.dialog_data)
    print(expenses)
    await dialog_manager.switch_to(state=StartSG.choice_date)


async def error_text_expense(callback: CallbackQuery, widget: ManagedTextInput, dialog_manager: DialogManager,
                             error: ValueError):
    await dialog_manager.switch_to(state=StartSG.expense)


# –í—ã–±–æ—Ä –¥–∞—Ç—ã
async def date_selection(callback: CallbackQuery, widget, dialog_manager: DialogManager):
    dialog_manager.dialog_data['date'] = widget.text.text
    expenses.update(dialog_manager.dialog_data)
    print(expenses)


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å
async def calendar(callback: CallbackQuery, widget, dialog_manager: DialogManager, selected_date: date):
    dialog_manager.dialog_data['date'] = selected_date.strftime("%d.%m.%Y –≥.")
    expenses.update(dialog_manager.dialog_data)
    print(expenses)
    await dialog_manager.switch_to(state=StartSG.result)


# –ì–ï–¢–¢–ï–†–´
# Username
async def username_getter(event_from_user: User, **kwargs):
    return {'username': event_from_user.first_name}


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_getter(**kwargs):
    categories = [
        ('–ó–∞–ø—Ä–∞–≤–∫–∞ ‚õΩÔ∏è', 1), ('–î–æ—Ä–æ–≥–∞ üõ£', 2), ('–ü–∞—Ä–∫–æ–≤–∫–∞ üÖøÔ∏è ', 3),
        ('–ú–æ–π–∫–∞ üßΩ', 4), ('–®—Ç—Ä–∞—Ñ üëÆ‚Äç‚ôÇÔ∏è', 5), ('–ù–∞–ª–æ–≥ üíµ', 6),
        ('–û–°–ê–ì–û üé´', 7), ('–ö–ê–°–ö–û üéü', 8), ('–ü—Ä–æ—á–µ–µ üõí', 9)
    ]
    return {'categories': categories}


# –†–µ–∑—É–ª—å—Ç–∞—Ç
async def result_getter(**kwargs):
    return {'date': expenses['date'], 'category': expenses['category'],
            'mileage': expenses['mileage'], 'expense': expenses['expense'], }


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message(callback: CallbackQuery, widget, dialog_manager: DialogManager):
    message = (f"üö® <b><u>–ù–û–í–´–ô –†–ê–°–•–û–î</u></b> üö®\n\n"
               f"<b>üìÜ   –î–∞—Ç–∞:</b>   {expenses['date']}\n"
               f"<b>üöô   –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>   {expenses['category']}\n"
               f"<b>üî¢   –ü—Ä–æ–±–µ–≥:</b>   {expenses['mileage']}\n"
               f"<b>üí∏   –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>   {expenses['expense']}")
    await bot.send_message(chat_id=CHAT_ID, text=message)


start_dialog = Dialog(
    # –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
    Window(
        Const('–•–æ—Ä–æ—à–æ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–º–Ω–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!'),
        SwitchTo(Const('‚úÖ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã'), id='yes', state=StartSG.category),
        state=StartSG.no_click,
    ),
    Window(
        Format('<b>–ü—Ä–∏–≤–µ—Ç, {username}!‚ò∫Ô∏è</b>\n\n'
               '–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —Ç–æ –≤–Ω–µ—Å–∏ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç!'),
        Row(
            Next(Const('‚úÖ –í–Ω–µ—Å—Ç–∏'), id='yes'),
            Back(Const('‚ùé –û—Ç–ª–æ–∂–∏—Ç—å'), id='no'),
        ),
        getter=username_getter,
        state=StartSG.start,
    ),

    # –ö–ê–¢–ï–ì–û–†–ò–ò
    Window(
        Const('–í—ã–±–µ—Ä–µ—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> —Ä–∞—Å—Ö–æ–¥–∞ üöô'),
        Group(
            Select(
                Format('{item[0]}'),
                id='category',
                item_id_getter=lambda x: x[1],
                items='categories',
                on_click=category_selection,
            ),
            width=3
        ),
        Back(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back'),
        state=StartSG.category,
        getter=category_getter,
    ),

    # –ü–†–û–ß–ï–ï
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∞—è –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ <b>–ø–æ–∫—É–ø–∫–∞ üõí</b>'),
        TextInput(id='other', type_factory=add_text_other, on_success=correct_text_other, on_error=error_text_other),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.category),
        state=StartSG.other_selected,
    ),

    # –ü–†–û–ë–ï–ì
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π <b>–ø—Ä–æ–±–µ–≥ üî¢</b> –∞–≤—Ç–æ–º–æ–±–∏–ª—è'),
        TextInput(id='mileage', type_factory=add_text_mileage, on_success=correct_text_mileage,
                  on_error=error_text_mileage),
        SwitchTo(Const('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ñ∂Ô∏è'), id='skip', state=StartSG.expense, on_click=skip_mileage),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.category),
        state=StartSG.mileage,
    ),

    # –†–ê–°–•–û–î
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å üí∏</b> –≤ —Ä—É–±–ª—è—Ö'),
        TextInput(id='expense', type_factory=add_text_expense, on_success=correct_text_expense,
                  on_error=error_text_expense),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.mileage),
        state=StartSG.expense,
    ),

    # –î–ê–¢–ê
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ <b>–¥–∞—Ç—É üìÜ</b>'),
        Group(
            Row(
                SwitchTo(Const('–°–µ–≥–æ–¥–Ω—è üëå '), id='today', state=StartSG.result, on_click=date_selection),
                SwitchTo(Const('–í—á–µ—Ä–∞ üëàüèª '), id='tomorrow', state=StartSG.result, on_click=date_selection),
            ),
            width=2
        ),
        SwitchTo(Const('üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É'), id='choice_date', state=StartSG.calendar),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.expense),
        SwitchTo(Const('‚ùé –û—Ç–º–µ–Ω–∏—Ç—å'), id='cancel', state=StartSG.no_click),
        state=StartSG.choice_date
    ),

    # –ö–ê–õ–ï–ù–î–ê–†–¨
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ <b>–¥–∞—Ç—É üìÜ</b>'),
        Calendar(id='calendar', on_click=calendar),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.choice_date),
        SwitchTo(Const('‚ùé –û—Ç–º–µ–Ω–∏—Ç—å'), id='cancel', state=StartSG.no_click),
        state=StartSG.calendar
    ),

    # –†–ï–ó–£–õ–¨–¢–ê–¢
    Window(
        Format('<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à —Ä–∞—Å—Ö–æ–¥!</b>\n\n'
               '<b>üìÜ   –î–∞—Ç–∞:</b>   {date}\n'
               '<b>üöô   –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>   {category}\n'
               '<b>üî¢   –ü—Ä–æ–±–µ–≥:</b>   {mileage}\n'
               '<b>üí∏   –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>   {expense}'
               ),
        SwitchTo(Const('‚úÖ –í–µ—Ä–Ω–æ!'), id='yes', state=StartSG.send_message, on_click=send_message),
        Row(
            SwitchTo(Const('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å'), id='change', state=StartSG.choice_change),
            SwitchTo(Const('‚ùé –û—Ç–º–µ–Ω–∏—Ç—å'), id='cancel', state=StartSG.no_click),
        ),
        getter=result_getter,
        state=StartSG.result
    ),

    # –í–ï–†–ù–û
    Window(
        Const('<b>–í–∞—à —Ä–∞—Å—Ö–æ–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>'),
        SwitchTo(Const('‚úÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥'), id='new_expense', state=StartSG.category),
        state=StartSG.send_message
    ),

    # –ò–ó–ú–ï–ù–ò–¢–¨
    Window(
        Const('<b>–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>'),
        Group(
            Row(
                SwitchTo(Const('üöô –ö–∞—Ç–µ–≥–æ—Ä–∏—é'), id='category', state=StartSG.category),
                SwitchTo(Const('üî¢ –ü—Ä–æ–±–µ–≥'), id='mileage', state=StartSG.mileage),
                SwitchTo(Const('üí∏ –†–∞—Å—Ö–æ–¥'), id='expense', state=StartSG.expense),
                SwitchTo(Const('üìÜ –î–∞—Ç—É'), id='date', state=StartSG.choice_date),
            ),
            width=2,
        ),
        SwitchTo(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='b_back', state=StartSG.result),
        state=StartSG.choice_change
    ),
)


# –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


dp.include_router(router)
dp.include_router(start_dialog)
setup_dialogs(dp)
dp.run_polling(bot)
